# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BulletBacteriumExt', [dirname(__file__)])
        except ImportError:
            import _BulletBacteriumExt
            return _BulletBacteriumExt
        if fp is not None:
            try:
                _mod = imp.load_module('_BulletBacteriumExt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BulletBacteriumExt = swig_import_helper()
    del swig_import_helper
else:
    import _BulletBacteriumExt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class BacteriumEnds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BacteriumEnds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BacteriumEnds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x1"] = _BulletBacteriumExt.BacteriumEnds_x1_set
    __swig_getmethods__["x1"] = _BulletBacteriumExt.BacteriumEnds_x1_get
    if _newclass:x1 = _swig_property(_BulletBacteriumExt.BacteriumEnds_x1_get, _BulletBacteriumExt.BacteriumEnds_x1_set)
    __swig_setmethods__["y1"] = _BulletBacteriumExt.BacteriumEnds_y1_set
    __swig_getmethods__["y1"] = _BulletBacteriumExt.BacteriumEnds_y1_get
    if _newclass:y1 = _swig_property(_BulletBacteriumExt.BacteriumEnds_y1_get, _BulletBacteriumExt.BacteriumEnds_y1_set)
    __swig_setmethods__["z1"] = _BulletBacteriumExt.BacteriumEnds_z1_set
    __swig_getmethods__["z1"] = _BulletBacteriumExt.BacteriumEnds_z1_get
    if _newclass:z1 = _swig_property(_BulletBacteriumExt.BacteriumEnds_z1_get, _BulletBacteriumExt.BacteriumEnds_z1_set)
    __swig_setmethods__["x2"] = _BulletBacteriumExt.BacteriumEnds_x2_set
    __swig_getmethods__["x2"] = _BulletBacteriumExt.BacteriumEnds_x2_get
    if _newclass:x2 = _swig_property(_BulletBacteriumExt.BacteriumEnds_x2_get, _BulletBacteriumExt.BacteriumEnds_x2_set)
    __swig_setmethods__["y2"] = _BulletBacteriumExt.BacteriumEnds_y2_set
    __swig_getmethods__["y2"] = _BulletBacteriumExt.BacteriumEnds_y2_get
    if _newclass:y2 = _swig_property(_BulletBacteriumExt.BacteriumEnds_y2_get, _BulletBacteriumExt.BacteriumEnds_y2_set)
    __swig_setmethods__["z2"] = _BulletBacteriumExt.BacteriumEnds_z2_set
    __swig_getmethods__["z2"] = _BulletBacteriumExt.BacteriumEnds_z2_get
    if _newclass:z2 = _swig_property(_BulletBacteriumExt.BacteriumEnds_z2_get, _BulletBacteriumExt.BacteriumEnds_z2_set)
    def __init__(self): 
        this = _BulletBacteriumExt.new_BacteriumEnds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BulletBacteriumExt.delete_BacteriumEnds
    __del__ = lambda self : None;
BacteriumEnds_swigregister = _BulletBacteriumExt.BacteriumEnds_swigregister
BacteriumEnds_swigregister(BacteriumEnds)

class Bacterium(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bacterium, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bacterium, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _BulletBacteriumExt.new_Bacterium(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BulletBacteriumExt.delete_Bacterium
    __del__ = lambda self : None;
    def setGrowthRate(self, *args): return _BulletBacteriumExt.Bacterium_setGrowthRate(self, *args)
    def divide(self, *args): return _BulletBacteriumExt.Bacterium_divide(self, *args)
    def length(self): return _BulletBacteriumExt.Bacterium_length(self)
    def radius(self): return _BulletBacteriumExt.Bacterium_radius(self)
    def volume(self): return _BulletBacteriumExt.Bacterium_volume(self)
    def position(self): return _BulletBacteriumExt.Bacterium_position(self)
    def setId(self, *args): return _BulletBacteriumExt.Bacterium_setId(self, *args)
    def getId(self): return _BulletBacteriumExt.Bacterium_getId(self)
    def pos(self): return _BulletBacteriumExt.Bacterium_pos(self)
    def ends(self,*args):
    	e = _BulletBacteriumExt.Bacterium_ends(self,*args)
    	v = ([e.x1, e.y1, e.z1], [e.x2, e.y2, e.z2])
    	return v


Bacterium_swigregister = _BulletBacteriumExt.Bacterium_swigregister
Bacterium_swigregister(Bacterium)

class Experiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Experiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Experiment, name)
    __repr__ = _swig_repr
    def __init__(self, boxw = 1000.0, boxh = 1000.0, boxd = 100.0): 
        this = _BulletBacteriumExt.new_Experiment(boxw, boxh, boxd)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BulletBacteriumExt.delete_Experiment
    __del__ = lambda self : None;
    def initBacteria(self, *args): return _BulletBacteriumExt.Experiment_initBacteria(self, *args)
    def step(self, *args): return _BulletBacteriumExt.Experiment_step(self, *args)
    def addCell(self, *args): return _BulletBacteriumExt.Experiment_addCell(self, *args)
    def divideCell(self, *args): return _BulletBacteriumExt.Experiment_divideCell(self, *args)
    def numCells(self): return _BulletBacteriumExt.Experiment_numCells(self)
    def length(self, *args): return _BulletBacteriumExt.Experiment_length(self, *args)
    def radius(self, *args): return _BulletBacteriumExt.Experiment_radius(self, *args)
    def volume(self, *args): return _BulletBacteriumExt.Experiment_volume(self, *args)
    def getNeighbours(self):
    	return None

    def ends(self,*args):
    	e = _BulletBacteriumExt.Experiment_ends(self,*args)
    	v = ([e.x1, e.y1, e.z1], [e.x2, e.y2, e.z2])
    	return v


    def setGrowthRate(self, *args): return _BulletBacteriumExt.Experiment_setGrowthRate(self, *args)
    def pos(self, *args): return _BulletBacteriumExt.Experiment_pos(self, *args)
Experiment_swigregister = _BulletBacteriumExt.Experiment_swigregister
Experiment_swigregister(Experiment)



