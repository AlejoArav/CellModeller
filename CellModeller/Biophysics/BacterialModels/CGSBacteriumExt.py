# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CGSBacteriumExt', [dirname(__file__)])
        except ImportError:
            import _CGSBacteriumExt
            return _CGSBacteriumExt
        if fp is not None:
            try:
                _mod = imp.load_module('_CGSBacteriumExt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CGSBacteriumExt = swig_import_helper()
    del swig_import_helper
else:
    import _CGSBacteriumExt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class CellEnds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellEnds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellEnds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x1"] = _CGSBacteriumExt.CellEnds_x1_set
    __swig_getmethods__["x1"] = _CGSBacteriumExt.CellEnds_x1_get
    if _newclass:x1 = _swig_property(_CGSBacteriumExt.CellEnds_x1_get, _CGSBacteriumExt.CellEnds_x1_set)
    __swig_setmethods__["y1"] = _CGSBacteriumExt.CellEnds_y1_set
    __swig_getmethods__["y1"] = _CGSBacteriumExt.CellEnds_y1_get
    if _newclass:y1 = _swig_property(_CGSBacteriumExt.CellEnds_y1_get, _CGSBacteriumExt.CellEnds_y1_set)
    __swig_setmethods__["z1"] = _CGSBacteriumExt.CellEnds_z1_set
    __swig_getmethods__["z1"] = _CGSBacteriumExt.CellEnds_z1_get
    if _newclass:z1 = _swig_property(_CGSBacteriumExt.CellEnds_z1_get, _CGSBacteriumExt.CellEnds_z1_set)
    __swig_setmethods__["x2"] = _CGSBacteriumExt.CellEnds_x2_set
    __swig_getmethods__["x2"] = _CGSBacteriumExt.CellEnds_x2_get
    if _newclass:x2 = _swig_property(_CGSBacteriumExt.CellEnds_x2_get, _CGSBacteriumExt.CellEnds_x2_set)
    __swig_setmethods__["y2"] = _CGSBacteriumExt.CellEnds_y2_set
    __swig_getmethods__["y2"] = _CGSBacteriumExt.CellEnds_y2_get
    if _newclass:y2 = _swig_property(_CGSBacteriumExt.CellEnds_y2_get, _CGSBacteriumExt.CellEnds_y2_set)
    __swig_setmethods__["z2"] = _CGSBacteriumExt.CellEnds_z2_set
    __swig_getmethods__["z2"] = _CGSBacteriumExt.CellEnds_z2_get
    if _newclass:z2 = _swig_property(_CGSBacteriumExt.CellEnds_z2_get, _CGSBacteriumExt.CellEnds_z2_set)
    def __init__(self): 
        this = _CGSBacteriumExt.new_CellEnds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CGSBacteriumExt.delete_CellEnds
    __del__ = lambda self : None;
CellEnds_swigregister = _CGSBacteriumExt.CellEnds_swigregister
CellEnds_swigregister(CellEnds)

class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGSBacteriumExt.new_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPos(self): return _CGSBacteriumExt.Cell_getPos(self)
    def updateInertiaTensor(self): return _CGSBacteriumExt.Cell_updateInertiaTensor(self)
    def length(self): return _CGSBacteriumExt.Cell_length(self)
    def radius(self): return _CGSBacteriumExt.Cell_radius(self)
    def volume(self): return _CGSBacteriumExt.Cell_volume(self)
    def position(self): return _CGSBacteriumExt.Cell_position(self)
    def setId(self, *args): return _CGSBacteriumExt.Cell_setId(self, *args)
    def getId(self): return _CGSBacteriumExt.Cell_getId(self)
    def pos(self): return _CGSBacteriumExt.Cell_pos(self)
    def ends(self,*args):
        e = _CGSBacteriumExt.Cell_ends(self,*args)
    	v = ([e.x1, e.y1, e.z1], [e.x2, e.y2, e.z2])
    	return v


    def contacts(self): return _CGSBacteriumExt.Cell_contacts(self)
    def setGrowthRate(self, *args): return _CGSBacteriumExt.Cell_setGrowthRate(self, *args)
    __swig_destroy__ = _CGSBacteriumExt.delete_Cell
    __del__ = lambda self : None;
Cell_swigregister = _CGSBacteriumExt.Cell_swigregister
Cell_swigregister(Cell)

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGSBacteriumExt.new_Solver()
        try: self.this.append(this)
        except: self.this = this
    def init(self): return _CGSBacteriumExt.Solver_init(self)
    __swig_destroy__ = _CGSBacteriumExt.delete_Solver
    __del__ = lambda self : None;
    def collide(self, *args): return _CGSBacteriumExt.Solver_collide(self, *args)
    def collideCapsules(self, *args): return _CGSBacteriumExt.Solver_collideCapsules(self, *args)
    def CGSolve(self, *args): return _CGSBacteriumExt.Solver_CGSolve(self, *args)
    def integrate(self, *args): return _CGSBacteriumExt.Solver_integrate(self, *args)
    def step(self, *args): return _CGSBacteriumExt.Solver_step(self, *args)
    def addCell(self, *args): return _CGSBacteriumExt.Solver_addCell(self, *args)
    def numCells(self): return _CGSBacteriumExt.Solver_numCells(self)
    def p_getCell(self, *args): return _CGSBacteriumExt.Solver_p_getCell(self, *args)
    def getCells(self):
    	cells = []
    	for i in range(self.numCells()):
    		cells.append(self.p_getCell(i))
    	return cells

    def getNeighbours(self):
    	return None
    def setRegulator(self, reg):
    	pass

    def divideCell(self, *args): return _CGSBacteriumExt.Solver_divideCell(self, *args)
    def length(self, *args): return _CGSBacteriumExt.Solver_length(self, *args)
    def radius(self, *args): return _CGSBacteriumExt.Solver_radius(self, *args)
    def volume(self, *args): return _CGSBacteriumExt.Solver_volume(self, *args)
    def ends(self,*args):
    	e = _CGSBacteriumExt.Solver_ends(self,*args)
    	v = ([e.x1, e.y1, e.z1], [e.x2, e.y2, e.z2])
    	return v


    def pos(self, *args): return _CGSBacteriumExt.Solver_pos(self, *args)
    def setGrowthRate(self, *args): return _CGSBacteriumExt.Solver_setGrowthRate(self, *args)
Solver_swigregister = _CGSBacteriumExt.Solver_swigregister
Solver_swigregister(Solver)



